package com.example.restapi.model;

import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.Objects;

/**
 * The Appointment class represents the appointment entity.
 */
@Entity
public class Appointment {

    public Appointment() {
    }

    public Appointment(Integer appointmentId, String title, Integer doctorId, Integer patientId, LocalDate appointmentDate, LocalDateTime creationDateTime, LocalTime startTime, LocalTime finishTime, Integer roomId, Integer repeatFrequency, LocalDate finishDateOfRepetition, Integer countOfRepeats, List<LocalDate> skippedRepeatAppointmentDates, List<DayOfWeek> daysOfWeek) {
        this.appointmentId = appointmentId;
        this.title = title;
        this.doctorId = doctorId;
        this.patientId = patientId;
        this.appointmentDate = appointmentDate;
        this.creationDateTime = creationDateTime;
        this.startTime = startTime;
        this.finishTime = finishTime;
        this.roomId = roomId;
        this.repeatFrequency = repeatFrequency;
        this.finishDateOfRepetition = finishDateOfRepetition;
        this.countOfRepeats = countOfRepeats;
        this.skippedRepeatAppointmentDates = skippedRepeatAppointmentDates;
        this.daysOfWeek = daysOfWeek;
    }

    /**
     * Unique appointment identifier that is autogenerated by the database
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer appointmentId;
    private String title;
    /**
     * Type of appointment <br/>
     */
    /**
     * Status of appointment <br/>
     */
    private Integer doctorId;
    private Integer patientId;
    private LocalDate appointmentDate;
    /**
     * Date and time of the creation of the appointment <br/>
     * Coordinated Universal Time - UTC+0
     */
    private LocalDateTime creationDateTime;
    /**
     * Appointment start time <br/>
     * Coordinated Universal Time - UTC+0
     */
    private LocalTime startTime;
    /**
     * Appointment finish time <br/>
     * Coordinated Universal Time - UTC+0
     */
    private LocalTime finishTime;
    private Integer roomId;
    /**
     * Repetition rate <br/>
     * If you need to repeat the appointment
     * every {@link Appointment repeatFrequency} day/week/month/year, set the value to 1
     */
    private Integer repeatFrequency;
    private LocalDate finishDateOfRepetition;

    private Integer countOfRepeats;
    /**
     * List of skipped appointments dates in repetition interval <br/>
     * We need it to reschedule the repeated appointment from one date to another <br/>
     * For example: if you have recurring appointments for one week, you can skip one date from this sample. <br/>
     * If you want to move this appointment to another date, you will need to create a new appointment. <br/>
     */
    @Type(type = "json")
    private List<LocalDate> skippedRepeatAppointmentDates;

    @Type(type = "json")
    @Enumerated(EnumType.STRING)
    private List<DayOfWeek> daysOfWeek;

    public Integer getAppointmentId() {
        return appointmentId;
    }

    public void setAppointmentId(Integer appointmentId) {
        this.appointmentId = appointmentId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }


    public Integer getDoctorId() {
        return doctorId;
    }

    public void setDoctorId(Integer doctorId) {
        this.doctorId = doctorId;
    }

    public Integer getPatientId() {
        return patientId;
    }

    public void setPatientId(Integer patientId) {
        this.patientId = patientId;
    }

    public LocalDate getAppointmentDate() {
        return appointmentDate;
    }

    public void setAppointmentDate(LocalDate appointmentDate) {
        this.appointmentDate = appointmentDate;
    }

    public LocalDateTime getCreationDateTime() {
        return creationDateTime;
    }

    public void setCreationDateTime(LocalDateTime creationDateTime) {
        this.creationDateTime = creationDateTime;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public void setStartTime(LocalTime startTime) {
        this.startTime = startTime;
    }

    public LocalTime getFinishTime() {
        return finishTime;
    }

    public void setFinishTime(LocalTime finishTime) {
        this.finishTime = finishTime;
    }

    public Integer getRoomId() {
        return roomId;
    }

    public void setRoomId(Integer roomId) {
        this.roomId = roomId;
    }

    public Integer getRepeatFrequency() {
        return repeatFrequency;
    }

    public void setRepeatFrequency(Integer repeatFrequency) {
        this.repeatFrequency = repeatFrequency;
    }

    public LocalDate getFinishDateOfRepetition() {
        return finishDateOfRepetition;
    }

    public void setFinishDateOfRepetition(LocalDate finishDateOfRepetition) {
        this.finishDateOfRepetition = finishDateOfRepetition;
    }

    public Integer getCountOfRepeats() {
        return countOfRepeats;
    }

    public void setCountOfRepeats(Integer countOfRepeats) {
        this.countOfRepeats = countOfRepeats;
    }

    public List<LocalDate> getSkippedRepeatAppointmentDates() {
        return skippedRepeatAppointmentDates;
    }

    public void setSkippedRepeatAppointmentDates(List<LocalDate> skippedRepeatAppointmentDates) {
        this.skippedRepeatAppointmentDates = skippedRepeatAppointmentDates;
    }

    public List<DayOfWeek> getDaysOfWeek() {
        return daysOfWeek;
    }

    public void setDaysOfWeek(List<DayOfWeek> daysOfWeek) {
        this.daysOfWeek = daysOfWeek;
    }
}

